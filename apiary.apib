FORMAT: 1A
HOST: https://ukache-spotters-web.herokuapp.com/api

# Spotters API
*Spotters API* is used by mobile applications.

## Authentication
*Spotters API* uses jwt token autorization. 

## Media Types
Responses body are plain JSON objects. 

Requests with a message-body are using plain JSON to set or update resource states.

## Error States
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

# Group Authentication

## Authentication [/auth/local]
All api endpoints requires user to pass `Bearer <token>` in `authorization` header. In order to obtain it, user will have to log in first. 

### Log in [POST]
In order to obtain `token` user will have to pass `email` and `password`. 

+ Request (application/json)

        {
            "email": "test@test.com",
            "password": "password"
        }

+ Response 200 (application/json)

        {
            "token": "someToken"
        }

# Group Missions 
Retrieves and accepts missions. 

## Missions Collection [/missions/locations{?location}]
### List 40 closest Missions [GET]
Retrieves locations of the missions that are available to accept. 

+ Parameters
    + location (required, array, `40.714728,-73.998672`) ... Location where to look for missions
    
+ Request (application/json)
  
    + Headers

            authorization: Bearer <JWT-Token>
    
+ Response 200 (application/json)

        [
            {
              "id": 1, 
              "title": "Nice and easy", 
              "company": "Tesco",
              "address": {
                "id": "123acb21",
                "coordinates": [40.714728, -73.998672],
                "distance": 0.2
              }, 
              "dueDate": "30-12-2014 22:10", 
              "price": 5
            },
            {
              "id": 2, 
              "title": "Nice and easy", 
              "company": "Tesco",
              "address": {
                "id": "123acb22",
                "coordinates": [40.714728, -74.998672],
                "distance": 10.2
              }, 
              "dueDate": "31-12-2014 12:10", 
              "price": 10
            }
        ]

## Mission Details [/missions/{missionId}/locations/{locationId}]
Mission details with location and tasks

+ Parameters
    + missionId (required, string, `123cvad2`) ... String `id` of the Mission 
    + locationId (required, string, `123cvad2`) ... String `id` of the location

### Retrieve a Mission [GET]
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            {
                  "id": 1,
                  "title": "Nice and easy",
                  "company": "Tesco",
                  "address": {
                    "id": "123acb21"m
                    "coordinates": [40.714728, -73.998672],
                    "distance": 0.2
                  },
                  "state": "active",
                  "dueDate": "2015-01-22T15:20:38",
                  "price": 5,
                  "tasks": [
                    {
                        "type": "question", 
                        "data": {},
                        "id": "packaging",
                        "label": "Do you like packaging?"
                    }
                  ],
                  "instructions": "<p>Some <b>html</b> descipiton</p>"
            }

## Booking mission [/missions/locations/{id}/accept]
Mission will be assign/declined for the user who is executing the action. 

### Accept a mission [PUT]
* Only mission in `state='active'` can be accepted. 
* `bookingDueTime` is calculated and set for the mission

+ Response 200 (application/json)

    + Body
    
            {
                  "id": 1,
                  "title": "Nice and easy",
                  "company": "Tesco",
                  "address": {
                    "coordinates": [40.714728, -73.998672],
                    "distance": 0.2
                  },
                  "dueDate": "2015-01-22T15:20:38",
                  "bookingDueTime": "2015-01-10T15:20:38",
                  "status": "booked",
                  "price": 5,
                  "tasks": [
                    {"type": "question", "count": 5, "icon": "ion-alert"},
                    {"type": "question", "count": 5, "icon": "ion-alert"},
                    {"type": "question", "count": 5, "icon": "ion-alert"},
                    {"type": "question", "count": 5, "icon": "ion-alert"},
                    {"type": "photo", "count": 1, "icon": "ion-help-circled"}
                  ],
                  "instructions": "<p>Some <b>html</b> descipiton</p>"
            }
            
### Decline a mission [DELETE]
* Only mission in state='booked' can be declined.

+ Response 200 (application/json)

    + Body
    
            {
                  "id": 1,
                  "title": "Nice and easy",
                  "company": "Tesco",
                  "address": {
                    "coordinates": [40.714728, -73.998672],
                    "distance": 0.2
                  },
                  "dueDate": "2015-01-22T15:20:38",
                  "bookingDueTime": "",
                  "status": "open",
                  "price": 5,
                  "tasks": [
                    {"type": "question", "count": 5, "icon": "ion-alert"},
                    {"type": "question", "count": 5, "icon": "ion-alert"},
                    {"type": "question", "count": 5, "icon": "ion-alert"},
                    {"type": "question", "count": 5, "icon": "ion-alert"},
                    {"type": "photo", "count": 1, "icon": "ion-help-circled"}
                  ],
                  "instructions": "<p>Some <b>html</b> descipiton</p>"
            }
