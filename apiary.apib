FORMAT: 1A
HOST: https://ukache-spotters-web.herokuapp.com

# Spotters API
*Spotters API* is used by mobile applications.

## Authentication
*Spotters API* uses jwt token autorization. 

## Media Types
Responses body are plain JSON objects. 

Requests with a message-body are using plain JSON to set or update resource states.

## Error States
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

# Group Authentication

## Authentication [/auth/local]
All api endpoints requires user to pass `Bearer <token>` in `authorization` header. In order to obtain it, user will have to log in first. 

### Log in [POST]
In order to obtain `token` user will have to pass `email` and `password`. 

+ Request (application/json)

        {
            "email": "test@test.com",
            "password": "password"
        }

+ Response 200 (application/json)

        {
            "token": "someToken"
        }

# Group Missions 
Retrieves and accepts missions. 

## Missions Collection [/api/missions/{?location,state}]

+ Model (application/json)
  
    This is the `application/json` missions collection representation.

    Distance `address.distance` is only returned if `location` is passed as a query parameter. 

    + Body

            [
                {
                  "id": 1, 
                  "title": "Nice and easy", 
                  "company": "Tesco",
                  "address": {
                    "id": "123acb21",
                    "coordinates": [40.714728, -73.998672],
                    "distance": 0.2
                  }, 
                  "dueDate": "30-12-2014 22:10", 
                  "price": 5,
                  "state": "active"
                },
                {
                  "id": 2, 
                  "title": "Nice and easy", 
                  "company": "Tesco",
                  "address": {
                    "id": "123acb22",
                    "coordinates": [40.714728, -74.998672],
                    "distance": 10.2
                  }, 
                  "dueDate": "31-12-2014 12:10", 
                  "price": 10,
                  "state": "booked"
                }
            ]


### List Missions [GET]
Retrieves locations of the missions that are available to book. 

+ Parameters
    + location (required, array, `40.714728,-73.998672`) ... Location where to look for missions, default distance is 10km
    + state (optional, string, `active`) ... Filters missions by state. 


+ Request (application/json)
  
    + Headers

            Authorization: Bearer <JWT-Token>
    
+ Response 200 (application/json)

    [Missions Collection][]

## Mission Details [/api/missions/{missionId}]

Mission contains:

* `title` - mission title
* `company` - name of the company
* `address` - mission location
* `state` - state of the mission, possible values `active booked`
* `dueDate` - date when this mission will expire
* `bookingDueTime` - date when current booking will expire, only for booked missions
* `bookingPeriod` - time in minutes of how much time user will have to finish the mission after booking
* `price` - price user earns after successful mission
* `tasks` - tasks to fulfill
* `instructions` - html instructions of what will happen in that mission

+ Parameters
    + missionId (required, string, `123cvad2`) ... String `id` of the Mission 

+ Model (application/json)
  
    This is the `application/json` mission resource representation.

    + Body

            {
                  "id": "asdfcb",
                  "title": "Nice and easy",
                  "company": "Tesco",
                  "address": {
                    "id": "123acb21",
                    "coordinates": [40.714728, -73.998672],
                    "distance": 0.2
                  },
                  "state": "active",
                  "dueDate": "2015-06-22T15:20:38",
                  "bookingDueTime": "2015-04-22T15:20:38",
                  "bookingPeriod": "60",
                  "price": 5,
                  "tasks": [
                    {
                        "type": "question", 
                        "data": {},
                        "id": "packaging",
                        "label": "Do you like packaging?"
                    }
                  ],
                  "instructions": "<p>Some <b>html</b> descipiton</p>"
            }

### Retrieve a Mission [GET]

+ Request (application/json)
  
    + Headers

            Authorization: Bearer <JWT-Token>

+ Response 200 (application/json)

   [Mission Details][]

## Booking mission [/api/missions/{missionId}/book]
Mission will be assign/declined for the user who is executing the action. 

+ Parameters
    + missionId (required, string, `123cvad2`) ... String `id` of the Mission 

### Book a mission [PUT]
* Only mission in `state='active'` can be accepted. 
* `bookingDueTime` is calculated and set for the mission

+ Request (application/json)
  
    + Headers

            Authorization: Bearer <JWT-Token>

+ Response 200 (application/json)

    [Mission Details][]
            
### Decline a mission [DELETE]
* Only mission in state='booked' can be declined.

+ Request (application/json)
  
    + Headers

            Authorization: Bearer <JWT-Token>

+ Response 200 (application/json)

    [Mission Details][]   

## User mission [/api/missions/me]

List of missions that are assigned to the user. 

There are 3 possible `state` of the mission: `booked`, `review`, `closed`


### Get a list of user mission [GET]

+ Request (application/json)
  
    + Headers

            Authorization: Bearer <JWT-Token>

+ Response 200 (application/json)

    [Missions Collection][]
    
## Mission tasks [/api/missions/{missionId}/tasks]

+ Parameters
    + missionId (required, string, `123cvad2`) ... String `id` of the Mission 

### Sending answers [PATCH]

+ Request (application/json)
  
    + Headers

            Authorization: Bearer <JWT-Token>
            
    + Body 
    
            [
                    {
                        "data": {
                            "answer": "Some answer from the user"
                        },
                        "id": "packaging"
                    },
                    {
                        "data": {
                            "answer": "s3://url/to/picture"
                        },
                        "id": "picure1"
                    }
            ]

+ Response 200 (application/json)

    [Mission Details][]    

